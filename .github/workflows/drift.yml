name: 'Drift Detection'

on: workflow_dispatch

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform Drift Detection'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        role-session-name: MySessionName

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terrafor and outputs an exit code 
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode 2>&1 | tee plan.txt
        echo "exitcode=${?}" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    # Check for Drift and exit the workflow accordingly
    - name: Check for Drift
      if: steps.plan.outputs.exitcode == '2'
      run: |
        echo "::error::Drift detected in Terraform managed infrastructure! Refer to output by terraform plan above."
        exit 1

    - name: No Drift Detected
      if: steps.plan.outputs.exitcode == '0'
      run: echo "No infrastructure drift detected"