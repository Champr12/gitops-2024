name: 'Drift Detection'

on: workflow_dispatch

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform Drift Detection'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        role-session-name: MySessionName

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terrafor and outputs an exit code 
    - name: Terraform Plan
      run: |
        # Save plan output to a file
        terraform plan -detailed-exitcode > plan_output.txt 2>&1
        EXITCODE=$?
        
        # Show the plan output
        cat plan_output.txt
        
        # Check if there's a plan with non-zero changes
        if ! grep -q "Plan: 0 to add, 0 to change, 0 to destroy" plan_output.txt || \
           [ $EXITCODE -eq 2 ]; then
          echo "::error::Drift detected! Changes found in plan"
          exit 1
        elif [ $EXITCODE -eq 0 ]; then
          echo "No changes detected"
          exit 0
        else
          echo "::error::Error running plan"
          exit 1
        fi